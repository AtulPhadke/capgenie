name: Build Executables and Create Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

jobs:
  build-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: macos
            executable-name: capgenie
            launcher-name: capgenie.sh
          - os: windows-latest
            platform: windows
            executable-name: capgenie.exe
            launcher-name: capgenie.bat

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git

    - name: Build executable
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          chmod +x build-executable-mac.sh
          ./build-executable-mac.sh
        else
          .\build-executable-windows.bat
        fi

    - name: Test executable
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "Testing macOS executable..."
          ./dist/capgenie --help
          ./dist/capgenie.sh --help
        else
          echo "Testing Windows executable..."
          dist\capgenie.exe --help
          dist\capgenie.bat --help
        fi

    - name: Upload executable artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capgenie-${{ matrix.platform }}-executable
        path: |
          dist/${{ matrix.executable-name }}
          dist/${{ matrix.launcher-name }}
        retention-days: 30

    - name: Create platform summary
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "# ${{ matrix.platform }} Executable Summary" > ${{ matrix.platform }}-summary.md
          echo "" >> ${{ matrix.platform }}-summary.md
          echo "## Build Information" >> ${{ matrix.platform }}-summary.md
          echo "- **Platform:** ${{ matrix.platform }}" >> ${{ matrix.platform }}-summary.md
          echo "- **Architecture:** $(uname -m)" >> ${{ matrix.platform }}-summary.md
          echo "- **Executable Size:** $(du -sh ./dist/${{ matrix.executable-name }} | cut -f1)" >> ${{ matrix.platform }}-summary.md
          echo "- **File Type:** $(file ./dist/${{ matrix.executable-name }} | cut -d: -f2)" >> ${{ matrix.platform }}-summary.md
          echo "" >> ${{ matrix.platform }}-summary.md
          echo "## Test Results" >> ${{ matrix.platform }}-summary.md
          echo "- ✅ Executable built successfully" >> ${{ matrix.platform }}-summary.md
          echo "- ✅ Help command works" >> ${{ matrix.platform }}-summary.md
          echo "- ✅ Launcher script works" >> ${{ matrix.platform }}-summary.md
        else
          echo # ${{ matrix.platform }} Executable Summary > ${{ matrix.platform }}-summary.md
          echo. >> ${{ matrix.platform }}-summary.md
          echo ## Build Information >> ${{ matrix.platform }}-summary.md
          echo - **Platform:** ${{ matrix.platform }} >> ${{ matrix.platform }}-summary.md
          echo - **Architecture:** x64 >> ${{ matrix.platform }}-summary.md
          for %%A in ("dist\${{ matrix.executable-name }}") do echo - **Executable Size:** %%~zA bytes >> ${{ matrix.platform }}-summary.md
          echo. >> ${{ matrix.platform }}-summary.md
          echo ## Test Results >> ${{ matrix.platform }}-summary.md
          echo - ✅ Executable built successfully >> ${{ matrix.platform }}-summary.md
          echo - ✅ Help command works >> ${{ matrix.platform }}-summary.md
          echo - ✅ Launcher script works >> ${{ matrix.platform }}-summary.md
        fi

    - name: Upload platform summary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-summary
        path: ${{ matrix.platform }}-summary.md
        retention-days: 30

  create-release:
    needs: build-executables
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all executables
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Download summaries
      uses: actions/download-artifact@v4
      with:
        name: macos-summary
        path: summaries

    - name: Download Windows summary
      uses: actions/download-artifact@v4
      with:
        name: windows-summary
        path: summaries

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: CapGenie Executables ${{ github.ref_name }}
        body: |
          ## CapGenie Executables ${{ github.ref_name }}
          
          ### What's New
          - Standalone executables for easy integration
          - Cross-platform compatibility (macOS and Windows)
          - Self-contained with all dependencies
          - Ready for Electron application integration
          
          ### Downloads
          Download the appropriate executable for your platform:
          
          **macOS:**
          - `capgenie-macos` - Apple Silicon/Intel compatible
          - `capgenie-macos.sh` - Launcher script
          
          **Windows:**
          - `capgenie-windows.exe` - Windows x64 executable
          - `capgenie-windows.bat` - Launcher script
          
          ### Integration
          1. Download the appropriate executable for your platform
          2. Copy to your Electron app's resources/executables/ directory
          3. Update your main.js to call the executable directly
          4. Package with your Electron application
          
          ### System Requirements
          - macOS 10.14+ (Intel or Apple Silicon)
          - Windows 10+ (x64)
          
          No additional Python installation required!
        draft: false
        prerelease: false

    - name: Upload macOS Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/capgenie-macos-executable/capgenie
        asset_name: capgenie-macos-${{ github.ref_name }}
        asset_content_type: application/octet-stream

    - name: Upload macOS Launcher
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/capgenie-macos-executable/capgenie.sh
        asset_name: capgenie-macos-${{ github.ref_name }}.sh
        asset_content_type: text/x-shellscript

    - name: Upload Windows Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/capgenie-windows-executable/capgenie.exe
        asset_name: capgenie-windows-${{ github.ref_name }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows Launcher
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/capgenie-windows-executable/capgenie.bat
        asset_name: capgenie-windows-${{ github.ref_name }}.bat
        asset_content_type: application/x-msdos-program

    - name: Create comprehensive release summary
      run: |
        echo "# CapGenie Executables Release ${{ github.ref_name }}" > release-summary.md
        echo "" >> release-summary.md
        echo "## Build Information" >> release-summary.md
        echo "- **Version:** ${{ github.ref_name }}" >> release-summary.md
        echo "- **Build Date:** $(date -u)" >> release-summary.md
        echo "- **Commit:** ${{ github.sha }}" >> release-summary.md
        echo "" >> release-summary.md
        echo "## Available Executables" >> release-summary.md
        echo "" >> release-summary.md
        echo "### macOS" >> release-summary.md
        if [ -f "artifacts/capgenie-macos-executable/capgenie" ]; then
          echo "- **Executable:** capgenie-macos-${{ github.ref_name }}" >> release-summary.md
          echo "- **Size:** $(du -sh artifacts/capgenie-macos-executable/capgenie | cut -f1)" >> release-summary.md
          echo "- **Type:** $(file artifacts/capgenie-macos-executable/capgenie | cut -d: -f2)" >> release-summary.md
        else
          echo "- **Status:** ❌ Not found" >> release-summary.md
        fi
        echo "" >> release-summary.md
        echo "### Windows" >> release-summary.md
        if [ -f "artifacts/capgenie-windows-executable/capgenie.exe" ]; then
          echo "- **Executable:** capgenie-windows-${{ github.ref_name }}.exe" >> release-summary.md
          echo "- **Size:** $(du -sh artifacts/capgenie-windows-executable/capgenie.exe | cut -f1)" >> release-summary.md
          echo "- **Type:** Windows executable" >> release-summary.md
        else
          echo "- **Status:** ❌ Not found" >> release-summary.md
        fi
        echo "" >> release-summary.md
        echo "## Integration Instructions" >> release-summary.md
        echo "" >> release-summary.md
        echo "### For Electron Applications:" >> release-summary.md
        echo "1. Download the appropriate executable for your platform" >> release-summary.md
        echo "2. Create a resources/executables/ directory in your Electron app" >> release-summary.md
        echo "3. Copy the executable to this directory" >> release-summary.md
        echo "4. Update your main.js to call the executable directly" >> release-summary.md
        echo "5. Package with your Electron application" >> release-summary.md
        echo "" >> release-summary.md
        echo "### Example Integration Code:" >> release-summary.md
        echo "\`\`\`javascript" >> release-summary.md
        echo "const { spawn } = require('child_process');" >> release-summary.md
        echo "const path = require('path');" >> release-summary.md
        echo "const { app } = require('electron');" >> release-summary.md
        echo "" >> release-summary.md
        echo "function getCapGenieExecutable() {" >> release-summary.md
        echo "  const executableDir = path.join(" >> release-summary.md
        echo "    app.isPackaged ? process.resourcesPath : __dirname," >> release-summary.md
        echo "    'resources', 'executables'" >> release-summary.md
        echo "  );" >> release-summary.md
        echo "  " >> release-summary.md
        echo "  if (process.platform === 'win32') {" >> release-summary.md
        echo "    return path.join(executableDir, 'capgenie-windows.exe');" >> release-summary.md
        echo "  } else {" >> release-summary.md
        echo "    return path.join(executableDir, 'capgenie-macos');" >> release-summary.md
        echo "  }" >> release-summary.md
        echo "}" >> release-summary.md
        echo "\`\`\`" >> release-summary.md

    - name: Upload release summary
      uses: actions/upload-artifact@v4
      with:
        name: release-summary
        path: release-summary.md
        retention-days: 30 